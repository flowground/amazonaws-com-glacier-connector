{
    "title": "Amazon Glacier",
    "description": "Amazon Glacier is a storage solution for \"cold data.\"\n\nAmazon Glacier is an extremely low-cost storage service that provides secure,\ndurable, and easy-to-use storage for data backup and archival. With Amazon\nGlacier, customers can store their data cost effectively for months, years, or\ndecades. Amazon Glacier also enables customers to offload the administrative\nburdens of operating and scaling storage to AWS, so they don't have to worry\nabout capacity planning, hardware provisioning, data replication, hardware\nfailure and recovery, or time-consuming hardware migrations.\n\nAmazon Glacier is a great storage choice when low storage cost is paramount and\nyour data is rarely retrieved. If your application requires fast or frequent\naccess to your data, consider using Amazon S3. For more information, see Amazon\nSimple Storage Service (Amazon S3) [http://aws.amazon.com/s3/].\n\nYou can store any kind of data in any format. There is no maximum limit on the\ntotal amount of data you can store in Amazon Glacier.\n\nIf you are a first-time user of Amazon Glacier, we recommend that you begin by\nreading the following sections in the Amazon Glacier Developer Guide:\n\n *   What is Amazon Glacier\n   [http://docs.aws.amazon.com/amazonglacier/latest/dev/introduction.html] -\n   This section of the Developer Guide describes the underlying data model, the\n   operations it supports, and the AWS SDKs that you can use to interact with\n   the service.\n   \n   \n *   Getting Started with Amazon Glacier\n   [http://docs.aws.amazon.com/amazonglacier/latest/dev/amazon-glacier-getting-started.html] \n   - The Getting Started section walks you through the process of creating a\n   vault, uploading archives, creating jobs to download archives, retrieving the\n   job output, and deleting archives.",
    "docsUrl": "https://aws.amazon.com/glacier/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/glacier/2012-06-01/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://glacier.amazonaws.com/",
                    "http://glacier.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v4"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "GetDataRetrievalPolicy": {
            "main": "./lib/actions/GetDataRetrievalPolicy.js",
            "title": "GetDataRetrievalPolicy",
            "description": "This operation returns the current data retrieval policy for the account and region specified in the GET request. For more information about data retrieval policies, see <a href=\"http://docs.aws.amazon.com/amazonglacier/latest/dev/data-retrieval-policy.html\">Amazon Glacier Data Retrieval Policies</a>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetDataRetrievalPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "SetDataRetrievalPolicy": {
            "main": "./lib/actions/SetDataRetrievalPolicy.js",
            "title": "SetDataRetrievalPolicy",
            "description": "This operation sets and then enacts a data retrieval policy in the region\nspecified in the PUT request. You can set one policy per region for an AWS\naccount. The policy is enacted within a few minutes of a successful PUT\noperation.\n\nThe set policy operation does not affect retrieval jobs that were in progress\nbefore the policy was enacted. For more information about data retrieval\npolicies, see Amazon Glacier Data Retrieval Policies\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/data-retrieval-policy.html]\n.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/SetDataRetrievalPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListProvisionedCapacity": {
            "main": "./lib/actions/ListProvisionedCapacity.js",
            "title": "ListProvisionedCapacity",
            "description": "This operation lists the provisioned capacity units for the specified AWS account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListProvisionedCapacity.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PurchaseProvisionedCapacity": {
            "main": "./lib/actions/PurchaseProvisionedCapacity.js",
            "title": "PurchaseProvisionedCapacity",
            "description": "This operation purchases a provisioned capacity unit for an AWS account. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PurchaseProvisionedCapacity.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListVaults": {
            "main": "./lib/actions/ListVaults.js",
            "title": "ListVaults",
            "description": "This operation lists all vaults owned by the calling user's account. The list\nreturned in the response is ASCII-sorted by vault name.\n\nBy default, this operation returns up to 10 items. If there are more vaults to\nlist, the response marker field contains the vault Amazon Resource Name (ARN) at\nwhich to continue the list with a new List Vaults request; otherwise, the marker \nfield is null. To return a list of vaults that begins at a specific vault, set\nthe marker request parameter to the vault ARN you obtained from a previous List\nVaults request. You can also limit the number of vaults returned in the response\nby specifying the limit parameter in the request. \n\nAn AWS account has full permission to perform all operations (actions). However,\nAWS Identity and Access Management (IAM) users don't have any permissions by\ndefault. You must grant them explicit permission to perform specific actions.\nFor more information, see Access Control Using AWS Identity and Access\nManagement (IAM)\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html]\n.\n\nFor conceptual information and underlying REST API, see Retrieving Vault\nMetadata in Amazon Glacier\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/retrieving-vault-info.html] \nand List Vaults\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/api-vaults-get.html] in the \nAmazon Glacier Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListVaults.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteVault": {
            "main": "./lib/actions/DeleteVault.js",
            "title": "DeleteVault",
            "description": "This operation deletes a vault. Amazon Glacier will delete a vault only if there\nare no archives in the vault as of the last inventory and there have been no\nwrites to the vault since the last inventory. If either of these conditions is\nnot satisfied, the vault deletion fails (that is, the vault is not removed) and\nAmazon Glacier returns an error. You can use DescribeVault to return the number\nof archives in a vault, and you can use Initiate a Job (POST jobs)\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/api-initiate-job-post.html] \nto initiate a new inventory retrieval for a vault. The inventory contains the\narchive IDs you use to delete archives using Delete Archive (DELETE archive)\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/api-archive-delete.html].\n\nThis operation is idempotent.\n\nAn AWS account has full permission to perform all operations (actions). However,\nAWS Identity and Access Management (IAM) users don't have any permissions by\ndefault. You must grant them explicit permission to perform specific actions.\nFor more information, see Access Control Using AWS Identity and Access\nManagement (IAM)\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html]\n.\n\n For conceptual information and underlying REST API, see Deleting a Vault in\nAmazon Glacier\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/deleting-vaults.html] and \nDelete Vault\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/api-vault-delete.html] in\nthe Amazon Glacier Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteVault.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeVault": {
            "main": "./lib/actions/DescribeVault.js",
            "title": "DescribeVault",
            "description": "This operation returns information about a vault, including the vault's Amazon\nResource Name (ARN), the date the vault was created, the number of archives it\ncontains, and the total size of all the archives in the vault. The number of\narchives and their total size are as of the last inventory generation. This\nmeans that if you add or remove an archive from a vault, and then immediately\nuse Describe Vault, the change in contents will not be immediately reflected. If\nyou want to retrieve the latest inventory of the vault, use InitiateJob. Amazon\nGlacier generates vault inventories approximately daily. For more information,\nsee Downloading a Vault Inventory in Amazon Glacier\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/vault-inventory.html]. \n\nAn AWS account has full permission to perform all operations (actions). However,\nAWS Identity and Access Management (IAM) users don't have any permissions by\ndefault. You must grant them explicit permission to perform specific actions.\nFor more information, see Access Control Using AWS Identity and Access\nManagement (IAM)\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html]\n.\n\nFor conceptual information and underlying REST API, see Retrieving Vault\nMetadata in Amazon Glacier\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/retrieving-vault-info.html] \nand Describe Vault\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/api-vault-get.html] in the \nAmazon Glacier Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeVault.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateVault": {
            "main": "./lib/actions/CreateVault.js",
            "title": "CreateVault",
            "description": "This operation creates a new vault with the specified name. The name of the\nvault must be unique within a region for an AWS account. You can create up to\n1,000 vaults per account. If you need to create more vaults, contact Amazon\nGlacier.\n\nYou must use the following guidelines when naming a vault.\n\n *  Names can be between 1 and 255 characters long.\n   \n   \n *  Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen), and\n   '.' (period).\n   \n   \n\nThis operation is idempotent.\n\nAn AWS account has full permission to perform all operations (actions). However,\nAWS Identity and Access Management (IAM) users don't have any permissions by\ndefault. You must grant them explicit permission to perform specific actions.\nFor more information, see Access Control Using AWS Identity and Access\nManagement (IAM)\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html]\n.\n\n For conceptual information and underlying REST API, see Creating a Vault in\nAmazon Glacier\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/creating-vaults.html] and \nCreate Vault\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/api-vault-put.html] in the \nAmazon Glacier Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateVault.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteVaultAccessPolicy": {
            "main": "./lib/actions/DeleteVaultAccessPolicy.js",
            "title": "DeleteVaultAccessPolicy",
            "description": "This operation deletes the access policy associated with the specified vault.\nThe operation is eventually consistent; that is, it might take some time for\nAmazon Glacier to completely remove the access policy, and you might still see\nthe effect of the policy for a short time after you send the delete request.\n\nThis operation is idempotent. You can invoke delete multiple times, even if\nthere is no policy associated with the vault. For more information about vault\naccess policies, see Amazon Glacier Access Control with Vault Access Policies\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/vault-access-policy.html].",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteVaultAccessPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetVaultAccessPolicy": {
            "main": "./lib/actions/GetVaultAccessPolicy.js",
            "title": "GetVaultAccessPolicy",
            "description": "This operation retrieves the <code>access-policy</code> subresource set on the vault; for more information on setting this subresource, see <a href=\"http://docs.aws.amazon.com/amazonglacier/latest/dev/api-SetVaultAccessPolicy.html\">Set Vault Access Policy (PUT access-policy)</a>. If there is no access policy set on the vault, the operation returns a <code>404 Not found</code> error. For more information about vault access policies, see <a href=\"http://docs.aws.amazon.com/amazonglacier/latest/dev/vault-access-policy.html\">Amazon Glacier Access Control with Vault Access Policies</a>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetVaultAccessPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "SetVaultAccessPolicy": {
            "main": "./lib/actions/SetVaultAccessPolicy.js",
            "title": "SetVaultAccessPolicy",
            "description": "This operation configures an access policy for a vault and will overwrite an existing policy. To configure a vault access policy, send a PUT request to the <code>access-policy</code> subresource of the vault. An access policy is specific to a vault and is also called a vault subresource. You can set one access policy per vault and the policy can be up to 20 KB in size. For more information about vault access policies, see <a href=\"http://docs.aws.amazon.com/amazonglacier/latest/dev/vault-access-policy.html\">Amazon Glacier Access Control with Vault Access Policies</a>. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/SetVaultAccessPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UploadArchive": {
            "main": "./lib/actions/UploadArchive.js",
            "title": "UploadArchive",
            "description": "This operation adds an archive to a vault. This is a synchronous operation, and\nfor a successful upload, your data is durably persisted. Amazon Glacier returns\nthe archive ID in the x-amz-archive-id header of the response. \n\nYou must use the archive ID to access your data in Amazon Glacier. After you\nupload an archive, you should save the archive ID returned so that you can\nretrieve or delete the archive later. Besides saving the archive ID, you can\nalso index it and give it a friendly name to allow for better searching. You can\nalso use the optional archive description field to specify how the archive is\nreferred to in an external index of archives, such as you might create in Amazon\nDynamoDB. You can also get the vault inventory to obtain a list of archive IDs\nin a vault. For more information, see InitiateJob. \n\nYou must provide a SHA256 tree hash of the data you are uploading. For\ninformation about computing a SHA256 tree hash, see Computing Checksums\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/checksum-calculations.html]\n. \n\nYou can optionally specify an archive description of up to 1,024 printable ASCII\ncharacters. You can get the archive description when you either retrieve the\narchive or get the vault inventory. For more information, see InitiateJob.\nAmazon Glacier does not interpret the description in any way. An archive\ndescription does not need to be unique. You cannot use the description to\nretrieve or sort the archive list. \n\nArchives are immutable. After you upload an archive, you cannot edit the archive\nor its description.\n\nAn AWS account has full permission to perform all operations (actions). However,\nAWS Identity and Access Management (IAM) users don't have any permissions by\ndefault. You must grant them explicit permission to perform specific actions.\nFor more information, see Access Control Using AWS Identity and Access\nManagement (IAM)\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html]\n.\n\n For conceptual information and underlying REST API, see Uploading an Archive in\nAmazon Glacier\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/uploading-an-archive.html] \nand Upload Archive\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/api-archive-post.html] in\nthe Amazon Glacier Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UploadArchive.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteArchive": {
            "main": "./lib/actions/DeleteArchive.js",
            "title": "DeleteArchive",
            "description": "This operation deletes an archive from a vault. Subsequent requests to initiate\na retrieval of this archive will fail. Archive retrievals that are in progress\nfor this archive ID may or may not succeed according to the following scenarios:\n\n *  If the archive retrieval job is actively preparing the data for download\n   when Amazon Glacier receives the delete archive request, the archival\n   retrieval operation might fail.\n   \n   \n *  If the archive retrieval job has successfully prepared the archive for\n   download when Amazon Glacier receives the delete archive request, you will be\n   able to download the output.\n   \n   \n\nThis operation is idempotent. Attempting to delete an already-deleted archive\ndoes not result in an error.\n\nAn AWS account has full permission to perform all operations (actions). However,\nAWS Identity and Access Management (IAM) users don't have any permissions by\ndefault. You must grant them explicit permission to perform specific actions.\nFor more information, see Access Control Using AWS Identity and Access\nManagement (IAM)\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html]\n.\n\n For conceptual information and underlying REST API, see Deleting an Archive in\nAmazon Glacier\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/deleting-an-archive.html] \nand Delete Archive\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/api-archive-delete.html] in\nthe Amazon Glacier Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteArchive.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListJobs": {
            "main": "./lib/actions/ListJobs.js",
            "title": "ListJobs",
            "description": "This operation lists jobs for a vault, including jobs that are in-progress and\njobs that have recently finished. The List Job operation returns a list of these\njobs sorted by job initiation time.\n\nAmazon Glacier retains recently completed jobs for a period before deleting\nthem; however, it eventually removes completed jobs. The output of completed\njobs can be retrieved. Retaining completed jobs for a period of time after they\nhave completed enables you to get a job output in the event you miss the job\ncompletion notification or your first attempt to download it fails. For example,\nsuppose you start an archive retrieval job to download an archive. After the job\ncompletes, you start to download the archive but encounter a network error. In\nthis scenario, you can retry and download the archive while the job exists.\n\nThe List Jobs operation supports pagination. You should always check the\nresponse Marker field. If there are no more jobs to list, the Marker field is\nset to null. If there are more jobs to list, the Marker field is set to a\nnon-null value, which you can use to continue the pagination of the list. To\nreturn a list of jobs that begins at a specific job, set the marker request\nparameter to the Marker value for that job that you obtained from a previous\nList Jobs request.\n\nYou can set a maximum limit for the number of jobs returned in the response by\nspecifying the limit parameter in the request. The default limit is 50. The\nnumber of jobs returned might be fewer than the limit, but the number of\nreturned jobs never exceeds the limit.\n\nAdditionally, you can filter the jobs list returned by specifying the optional \nstatuscode parameter or completed parameter, or both. Using the statuscode \nparameter, you can specify to return only jobs that match either the InProgress, \nSucceeded, or Failed status. Using the completed parameter, you can specify to\nreturn only jobs that were completed (true) or jobs that were not completed (\nfalse).\n\nFor more information about using this operation, see the documentation for the\nunderlying REST API List Jobs\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/api-jobs-get.html].",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListJobs.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "InitiateJob": {
            "main": "./lib/actions/InitiateJob.js",
            "title": "InitiateJob",
            "description": "This operation initiates a job of the specified type, which can be a select, an archival retrieval, or a vault retrieval. For more information about using this operation, see the documentation for the underlying REST API <a href=\"http://docs.aws.amazon.com/amazonglacier/latest/dev/api-initiate-job-post.html\">Initiate a Job</a>. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/InitiateJob.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeJob": {
            "main": "./lib/actions/DescribeJob.js",
            "title": "DescribeJob",
            "description": "This operation returns information about a job you previously initiated,\nincluding the job initiation date, the user who initiated the job, the job\nstatus code/message and the Amazon SNS topic to notify after Amazon Glacier\ncompletes the job. For more information about initiating a job, see InitiateJob. \n\nThis operation enables you to check the status of your job. However, it is\nstrongly recommended that you set up an Amazon SNS topic and specify it in your\ninitiate job request so that Amazon Glacier can notify the topic after it\ncompletes the job.\n\nA job ID will not expire for at least 24 hours after Amazon Glacier completes\nthe job.\n\nAn AWS account has full permission to perform all operations (actions). However,\nAWS Identity and Access Management (IAM) users don't have any permissions by\ndefault. You must grant them explicit permission to perform specific actions.\nFor more information, see Access Control Using AWS Identity and Access\nManagement (IAM)\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html]\n.\n\n For more information about using this operation, see the documentation for the\nunderlying REST API Describe Job\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/api-describe-job-get.html] \nin the Amazon Glacier Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeJob.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetJobOutput": {
            "main": "./lib/actions/GetJobOutput.js",
            "title": "GetJobOutput",
            "description": "This operation downloads the output of the job you initiated using InitiateJob.\nDepending on the job type you specified when you initiated the job, the output\nwill be either the content of an archive or a vault inventory.\n\nYou can download all the job output or download a portion of the output by\nspecifying a byte range. In the case of an archive retrieval job, depending on\nthe byte range you specify, Amazon Glacier returns the checksum for the portion\nof the data. You can compute the checksum on the client and verify that the\nvalues match to ensure the portion you downloaded is the correct data.\n\nA job ID will not expire for at least 24 hours after Amazon Glacier completes\nthe job. That a byte range. For both archive and inventory retrieval jobs, you\nshould verify the downloaded size against the size returned in the headers from\nthe Get Job Output response.\n\nFor archive retrieval jobs, you should also verify that the size is what you\nexpected. If you download a portion of the output, the expected size is based on\nthe range of bytes you specified. For example, if you specify a range of \nbytes=0-1048575, you should verify your download size is 1,048,576 bytes. If you\ndownload an entire archive, the expected size is the size of the archive when\nyou uploaded it to Amazon Glacier The expected size is also returned in the\nheaders from the Get Job Output response.\n\nIn the case of an archive retrieval job, depending on the byte range you\nspecify, Amazon Glacier returns the checksum for the portion of the data. To\nensure the portion you downloaded is the correct data, compute the checksum on\nthe client, verify that the values match, and verify that the size is what you\nexpected.\n\nA job ID does not expire for at least 24 hours after Amazon Glacier completes\nthe job. That is, you can download the job output within the 24 hours period\nafter Amazon Glacier completes the job.\n\nAn AWS account has full permission to perform all operations (actions). However,\nAWS Identity and Access Management (IAM) users don't have any permissions by\ndefault. You must grant them explicit permission to perform specific actions.\nFor more information, see Access Control Using AWS Identity and Access\nManagement (IAM)\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html]\n.\n\nFor conceptual information and the underlying REST API, see Downloading a Vault\nInventory\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/vault-inventory.html], \nDownloading an Archive\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/downloading-an-archive.html]\n, and Get Job Output\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/api-job-output-get.html]",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetJobOutput.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "AbortVaultLock": {
            "main": "./lib/actions/AbortVaultLock.js",
            "title": "AbortVaultLock",
            "description": "This operation aborts the vault locking process if the vault lock is not in the \nLocked state. If the vault lock is in the Locked state when this operation is\nrequested, the operation returns an AccessDeniedException error. Aborting the\nvault locking process removes the vault lock policy from the specified vault. \n\nA vault lock is put into the InProgress state by calling InitiateVaultLock. A\nvault lock is put into the Locked state by calling CompleteVaultLock. You can\nget the state of a vault lock by calling GetVaultLock. For more information\nabout the vault locking process, see Amazon Glacier Vault Lock\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock.html]. For more\ninformation about vault lock policies, see Amazon Glacier Access Control with\nVault Lock Policies\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock-policy.html]. \n\nThis operation is idempotent. You can successfully invoke this operation\nmultiple times, if the vault lock is in the InProgress state or if there is no\npolicy associated with the vault.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/AbortVaultLock.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetVaultLock": {
            "main": "./lib/actions/GetVaultLock.js",
            "title": "GetVaultLock",
            "description": "This operation retrieves the following attributes from the lock-policy \nsubresource set on the specified vault: \n\n *  The vault lock policy set on the vault.\n   \n   \n *  The state of the vault lock, which is either InProgess or Locked.\n   \n   \n *  When the lock ID expires. The lock ID is used to complete the vault locking\n   process.\n   \n   \n *  When the vault lock was initiated and put into the InProgress state.\n   \n   \n\nA vault lock is put into the InProgress state by calling InitiateVaultLock. A\nvault lock is put into the Locked state by calling CompleteVaultLock. You can\nabort the vault locking process by calling AbortVaultLock. For more information\nabout the vault locking process, Amazon Glacier Vault Lock\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock.html]. \n\nIf there is no vault lock policy set on the vault, the operation returns a 404\nNot found error. For more information about vault lock policies, Amazon Glacier\nAccess Control with Vault Lock Policies\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock-policy.html].",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetVaultLock.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "InitiateVaultLock": {
            "main": "./lib/actions/InitiateVaultLock.js",
            "title": "InitiateVaultLock",
            "description": "This operation initiates the vault locking process by doing the following:\n\n *  Installing a vault lock policy on the specified vault.\n   \n   \n *  Setting the lock state of vault lock to InProgress.\n   \n   \n *  Returning a lock ID, which is used to complete the vault locking process.\n   \n   \n\nYou can set one vault lock policy for each vault and this policy can be up to 20\nKB in size. For more information about vault lock policies, see Amazon Glacier\nAccess Control with Vault Lock Policies\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock-policy.html]. \n\nYou must complete the vault locking process within 24 hours after the vault lock\nenters the InProgress state. After the 24 hour window ends, the lock ID expires,\nthe vault automatically exits the InProgress state, and the vault lock policy is\nremoved from the vault. You call CompleteVaultLock to complete the vault locking\nprocess by setting the state of the vault lock to Locked. \n\nAfter a vault lock is in the Locked state, you cannot initiate a new vault lock\nfor the vault.\n\nYou can abort the vault locking process by calling AbortVaultLock. You can get\nthe state of the vault lock by calling GetVaultLock. For more information about\nthe vault locking process, Amazon Glacier Vault Lock\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock.html].\n\nIf this operation is called when the vault lock is in the InProgress state, the\noperation returns an AccessDeniedException error. When the vault lock is in the \nInProgress state you must call AbortVaultLock before you can initiate a new\nvault lock policy.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/InitiateVaultLock.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CompleteVaultLock": {
            "main": "./lib/actions/CompleteVaultLock.js",
            "title": "CompleteVaultLock",
            "description": "This operation completes the vault locking process by transitioning the vault\nlock from the InProgress state to the Locked state, which causes the vault lock\npolicy to become unchangeable. A vault lock is put into the InProgress state by\ncalling InitiateVaultLock. You can obtain the state of the vault lock by calling \nGetVaultLock. For more information about the vault locking process, Amazon\nGlacier Vault Lock\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock.html]. \n\nThis operation is idempotent. This request is always successful if the vault\nlock is in the Locked state and the provided lock ID matches the lock ID\noriginally used to lock the vault.\n\nIf an invalid lock ID is passed in the request when the vault lock is in the \nLocked state, the operation returns an AccessDeniedException error. If an\ninvalid lock ID is passed in the request when the vault lock is in the \nInProgress state, the operation throws an InvalidParameter error.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CompleteVaultLock.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListMultipartUploads": {
            "main": "./lib/actions/ListMultipartUploads.js",
            "title": "ListMultipartUploads",
            "description": "This operation lists in-progress multipart uploads for the specified vault. An\nin-progress multipart upload is a multipart upload that has been initiated by an \nInitiateMultipartUpload request, but has not yet been completed or aborted. The\nlist returned in the List Multipart Upload response has no guaranteed order. \n\nThe List Multipart Uploads operation supports pagination. By default, this\noperation returns up to 50 multipart uploads in the response. You should always\ncheck the response for a marker at which to continue the list; if there are no\nmore items the marker is null. To return a list of multipart uploads that begins\nat a specific upload, set the marker request parameter to the value you obtained\nfrom a previous List Multipart Upload request. You can also limit the number of\nuploads returned in the response by specifying the limit parameter in the\nrequest.\n\nNote the difference between this operation and listing parts (ListParts). The\nList Multipart Uploads operation lists all multipart uploads for a vault and\ndoes not require a multipart upload ID. The List Parts operation requires a\nmultipart upload ID since parts are associated with a single upload.\n\nAn AWS account has full permission to perform all operations (actions). However,\nAWS Identity and Access Management (IAM) users don't have any permissions by\ndefault. You must grant them explicit permission to perform specific actions.\nFor more information, see Access Control Using AWS Identity and Access\nManagement (IAM)\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html]\n.\n\nFor conceptual information and the underlying REST API, see Working with\nArchives in Amazon Glacier\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/working-with-archives.html] \nand List Multipart Uploads\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/api-multipart-list-uploads.html] \nin the Amazon Glacier Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListMultipartUploads.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "InitiateMultipartUpload": {
            "main": "./lib/actions/InitiateMultipartUpload.js",
            "title": "InitiateMultipartUpload",
            "description": "This operation initiates a multipart upload. Amazon Glacier creates a multipart\nupload resource and returns its ID in the response. The multipart upload ID is\nused in subsequent requests to upload parts of an archive (see \nUploadMultipartPart).\n\nWhen you initiate a multipart upload, you specify the part size in number of\nbytes. The part size must be a megabyte (1024 KB) multiplied by a power of 2-for\nexample, 1048576 (1 MB), 2097152 (2 MB), 4194304 (4 MB), 8388608 (8 MB), and so\non. The minimum allowable part size is 1 MB, and the maximum is 4 GB.\n\nEvery part you upload to this resource (see UploadMultipartPart), except the\nlast one, must have the same size. The last one can be the same size or smaller.\nFor example, suppose you want to upload a 16.2 MB file. If you initiate the\nmultipart upload with a part size of 4 MB, you will upload four parts of 4 MB\neach and one part of 0.2 MB. \n\nYou don't need to know the size of the archive when you start a multipart upload\nbecause Amazon Glacier does not require you to specify the overall archive size.\n\nAfter you complete the multipart upload, Amazon Glacier removes the multipart\nupload resource referenced by the ID. Amazon Glacier also removes the multipart\nupload resource if you cancel the multipart upload or it may be removed if there\nis no activity for a period of 24 hours.\n\nAn AWS account has full permission to perform all operations (actions). However,\nAWS Identity and Access Management (IAM) users don't have any permissions by\ndefault. You must grant them explicit permission to perform specific actions.\nFor more information, see Access Control Using AWS Identity and Access\nManagement (IAM)\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html]\n.\n\nFor conceptual information and underlying REST API, see Uploading Large Archives\nin Parts (Multipart Upload)\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/uploading-archive-mpu.html] \nand Initiate Multipart Upload\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/api-multipart-initiate-upload.html] \nin the Amazon Glacier Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/InitiateMultipartUpload.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "AbortMultipartUpload": {
            "main": "./lib/actions/AbortMultipartUpload.js",
            "title": "AbortMultipartUpload",
            "description": "This operation aborts a multipart upload identified by the upload ID.\n\nAfter the Abort Multipart Upload request succeeds, you cannot upload any more\nparts to the multipart upload or complete the multipart upload. Aborting a\ncompleted upload fails. However, aborting an already-aborted upload will\nsucceed, for a short time. For more information about uploading a part and\ncompleting a multipart upload, see UploadMultipartPart and \nCompleteMultipartUpload.\n\nThis operation is idempotent.\n\nAn AWS account has full permission to perform all operations (actions). However,\nAWS Identity and Access Management (IAM) users don't have any permissions by\ndefault. You must grant them explicit permission to perform specific actions.\nFor more information, see Access Control Using AWS Identity and Access\nManagement (IAM)\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html]\n.\n\n For conceptual information and underlying REST API, see Working with Archives\nin Amazon Glacier\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/working-with-archives.html] \nand Abort Multipart Upload\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/api-multipart-abort-upload.html] \nin the Amazon Glacier Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/AbortMultipartUpload.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListParts": {
            "main": "./lib/actions/ListParts.js",
            "title": "ListParts",
            "description": "This operation lists the parts of an archive that have been uploaded in a\nspecific multipart upload. You can make this request at any time during an\nin-progress multipart upload before you complete the upload (see \nCompleteMultipartUpload. List Parts returns an error for completed uploads. The\nlist returned in the List Parts response is sorted by part range. \n\nThe List Parts operation supports pagination. By default, this operation returns\nup to 50 uploaded parts in the response. You should always check the response\nfor a marker at which to continue the list; if there are no more items the \nmarker is null. To return a list of parts that begins at a specific part, set\nthe marker request parameter to the value you obtained from a previous List\nParts request. You can also limit the number of parts returned in the response\nby specifying the limit parameter in the request. \n\nAn AWS account has full permission to perform all operations (actions). However,\nAWS Identity and Access Management (IAM) users don't have any permissions by\ndefault. You must grant them explicit permission to perform specific actions.\nFor more information, see Access Control Using AWS Identity and Access\nManagement (IAM)\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html]\n.\n\nFor conceptual information and the underlying REST API, see Working with\nArchives in Amazon Glacier\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/working-with-archives.html] \nand List Parts\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/api-multipart-list-parts.html] \nin the Amazon Glacier Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListParts.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CompleteMultipartUpload": {
            "main": "./lib/actions/CompleteMultipartUpload.js",
            "title": "CompleteMultipartUpload",
            "description": "You call this operation to inform Amazon Glacier that all the archive parts have\nbeen uploaded and that Amazon Glacier can now assemble the archive from the\nuploaded parts. After assembling and saving the archive to the vault, Amazon\nGlacier returns the URI path of the newly created archive resource. Using the\nURI path, you can then access the archive. After you upload an archive, you\nshould save the archive ID returned to retrieve the archive at a later point.\nYou can also get the vault inventory to obtain a list of archive IDs in a vault.\nFor more information, see InitiateJob.\n\nIn the request, you must include the computed SHA256 tree hash of the entire\narchive you have uploaded. For information about computing a SHA256 tree hash,\nsee Computing Checksums\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/checksum-calculations.html]\n. On the server side, Amazon Glacier also constructs the SHA256 tree hash of the\nassembled archive. If the values match, Amazon Glacier saves the archive to the\nvault; otherwise, it returns an error, and the operation fails. The ListParts \noperation returns a list of parts uploaded for a specific multipart upload. It\nincludes checksum information for each uploaded part that can be used to debug a\nbad checksum issue.\n\nAdditionally, Amazon Glacier also checks for any missing content ranges when\nassembling the archive, if missing content ranges are found, Amazon Glacier\nreturns an error and the operation fails.\n\nComplete Multipart Upload is an idempotent operation. After your first\nsuccessful complete multipart upload, if you call the operation again within a\nshort period, the operation will succeed and return the same archive ID. This is\nuseful in the event you experience a network issue that causes an aborted\nconnection or receive a 500 server error, in which case you can repeat your\nComplete Multipart Upload request and get the same archive ID without creating\nduplicate archives. Note, however, that after the multipart upload completes,\nyou cannot call the List Parts operation and the multipart upload will not\nappear in List Multipart Uploads response, even if idempotent complete is\npossible.\n\nAn AWS account has full permission to perform all operations (actions). However,\nAWS Identity and Access Management (IAM) users don't have any permissions by\ndefault. You must grant them explicit permission to perform specific actions.\nFor more information, see Access Control Using AWS Identity and Access\nManagement (IAM)\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html]\n.\n\n For conceptual information and underlying REST API, see Uploading Large\nArchives in Parts (Multipart Upload)\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/uploading-archive-mpu.html] \nand Complete Multipart Upload\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/api-multipart-complete-upload.html] \nin the Amazon Glacier Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CompleteMultipartUpload.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UploadMultipartPart": {
            "main": "./lib/actions/UploadMultipartPart.js",
            "title": "UploadMultipartPart",
            "description": "This operation uploads a part of an archive. You can upload archive parts in any\norder. You can also upload them in parallel. You can upload up to 10,000 parts\nfor a multipart upload.\n\nAmazon Glacier rejects your upload part request if any of the following\nconditions is true:\n\n *   SHA256 tree hash does not matchTo ensure that part data is not corrupted in\n   transmission, you compute a SHA256 tree hash of the part and include it in\n   your request. Upon receiving the part data, Amazon Glacier also computes a\n   SHA256 tree hash. If these hash values don't match, the operation fails. For\n   information about computing a SHA256 tree hash, see Computing Checksums\n   [http://docs.aws.amazon.com/amazonglacier/latest/dev/checksum-calculations.html]\n   .\n   \n   \n *   Part size does not matchThe size of each part except the last must match the\n   size specified in the corresponding InitiateMultipartUpload request. The size\n   of the last part must be the same size as, or smaller than, the specified\n   size.\n   \n   If you upload a part whose size is smaller than the part size you specified\n   in your initiate multipart upload request and that part is not the last part,\n   then the upload part request will succeed. However, the subsequent Complete\n   Multipart Upload request will fail.\n   \n   \n *   Range does not alignThe byte range value in the request does not align with\n   the part size specified in the corresponding initiate request. For example,\n   if you specify a part size of 4194304 bytes (4 MB), then 0 to 4194303 bytes\n   (4 MB - 1) and 4194304 (4 MB) to 8388607 (8 MB - 1) are valid part ranges.\n   However, if you set a range value of 2 MB to 6 MB, the range does not align\n   with the part size and the upload will fail. \n   \n   \n\nThis operation is idempotent. If you upload the same part multiple times, the\ndata included in the most recent request overwrites the previously uploaded\ndata.\n\nAn AWS account has full permission to perform all operations (actions). However,\nAWS Identity and Access Management (IAM) users don't have any permissions by\ndefault. You must grant them explicit permission to perform specific actions.\nFor more information, see Access Control Using AWS Identity and Access\nManagement (IAM)\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html]\n.\n\n For conceptual information and underlying REST API, see Uploading Large\nArchives in Parts (Multipart Upload)\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/uploading-archive-mpu.html] \nand Upload Part\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/api-upload-part.html] in\nthe Amazon Glacier Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UploadMultipartPart.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteVaultNotifications": {
            "main": "./lib/actions/DeleteVaultNotifications.js",
            "title": "DeleteVaultNotifications",
            "description": "This operation deletes the notification configuration set for a vault. The\noperation is eventually consistent; that is, it might take some time for Amazon\nGlacier to completely disable the notifications and you might still receive some\nnotifications for a short time after you send the delete request.\n\nAn AWS account has full permission to perform all operations (actions). However,\nAWS Identity and Access Management (IAM) users don't have any permissions by\ndefault. You must grant them explicit permission to perform specific actions.\nFor more information, see Access Control Using AWS Identity and Access\nManagement (IAM)\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html]\n.\n\n For conceptual information and underlying REST API, see Configuring Vault\nNotifications in Amazon Glacier\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/configuring-notifications.html] \nand Delete Vault Notification Configuration\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/api-vault-notifications-delete.html] \nin the Amazon Glacier Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteVaultNotifications.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetVaultNotifications": {
            "main": "./lib/actions/GetVaultNotifications.js",
            "title": "GetVaultNotifications",
            "description": "This operation retrieves the notification-configuration subresource of the\nspecified vault.\n\nFor information about setting a notification configuration on a vault, see \nSetVaultNotifications. If a notification configuration for a vault is not set,\nthe operation returns a 404 Not Found error. For more information about vault\nnotifications, see Configuring Vault Notifications in Amazon Glacier\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/configuring-notifications.html]\n. \n\nAn AWS account has full permission to perform all operations (actions). However,\nAWS Identity and Access Management (IAM) users don't have any permissions by\ndefault. You must grant them explicit permission to perform specific actions.\nFor more information, see Access Control Using AWS Identity and Access\nManagement (IAM)\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html]\n.\n\nFor conceptual information and underlying REST API, see Configuring Vault\nNotifications in Amazon Glacier\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/configuring-notifications.html] \nand Get Vault Notification Configuration\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/api-vault-notifications-get.html] \nin the Amazon Glacier Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetVaultNotifications.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "SetVaultNotifications": {
            "main": "./lib/actions/SetVaultNotifications.js",
            "title": "SetVaultNotifications",
            "description": "This operation configures notifications that will be sent when specific events\nhappen to a vault. By default, you don't get any notifications.\n\nTo configure vault notifications, send a PUT request to the \nnotification-configuration subresource of the vault. The request should include\na JSON document that provides an Amazon SNS topic and specific events for which\nyou want Amazon Glacier to send notifications to the topic.\n\nAmazon SNS topics must grant permission to the vault to be allowed to publish\nnotifications to the topic. You can configure a vault to publish a notification\nfor the following vault events:\n\n *   ArchiveRetrievalCompleted This event occurs when a job that was initiated\n   for an archive retrieval is completed (InitiateJob). The status of the\n   completed job can be \"Succeeded\" or \"Failed\". The notification sent to the\n   SNS topic is the same output as returned from DescribeJob. \n   \n   \n *   InventoryRetrievalCompleted This event occurs when a job that was initiated\n   for an inventory retrieval is completed (InitiateJob). The status of the\n   completed job can be \"Succeeded\" or \"Failed\". The notification sent to the\n   SNS topic is the same output as returned from DescribeJob. \n   \n   \n\nAn AWS account has full permission to perform all operations (actions). However,\nAWS Identity and Access Management (IAM) users don't have any permissions by\ndefault. You must grant them explicit permission to perform specific actions.\nFor more information, see Access Control Using AWS Identity and Access\nManagement (IAM)\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html]\n.\n\nFor conceptual information and underlying REST API, see Configuring Vault\nNotifications in Amazon Glacier\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/configuring-notifications.html] \nand Set Vault Notification Configuration\n[http://docs.aws.amazon.com/amazonglacier/latest/dev/api-vault-notifications-put.html] \nin the Amazon Glacier Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/SetVaultNotifications.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListTagsForVault": {
            "main": "./lib/actions/ListTagsForVault.js",
            "title": "ListTagsForVault",
            "description": "This operation lists all the tags attached to a vault. The operation returns an empty map if there are no tags. For more information about tags, see <a href=\"http://docs.aws.amazon.com/amazonglacier/latest/dev/tagging.html\">Tagging Amazon Glacier Resources</a>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListTagsForVault.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "AddTagsToVault": {
            "main": "./lib/actions/AddTagsToVault.js",
            "title": "AddTagsToVault",
            "description": "This operation adds the specified tags to a vault. Each tag is composed of a key and a value. Each vault can have up to 10 tags. If your request would cause the tag limit for the vault to be exceeded, the operation throws the <code>LimitExceededException</code> error. If a tag already exists on the vault under a specified key, the existing key value will be overwritten. For more information about tags, see <a href=\"http://docs.aws.amazon.com/amazonglacier/latest/dev/tagging.html\">Tagging Amazon Glacier Resources</a>. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/AddTagsToVault.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "RemoveTagsFromVault": {
            "main": "./lib/actions/RemoveTagsFromVault.js",
            "title": "RemoveTagsFromVault",
            "description": "This operation removes one or more tags from the set of tags attached to a vault. For more information about tags, see <a href=\"http://docs.aws.amazon.com/amazonglacier/latest/dev/tagging.html\">Tagging Amazon Glacier Resources</a>. This operation is idempotent. The operation will be successful, even if there are no tags attached to the vault. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/RemoveTagsFromVault.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}